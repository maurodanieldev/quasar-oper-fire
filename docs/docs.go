// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Daniel Mauro",
            "email": "mauro.daniel.dev@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "check API health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.Health"
                        }
                    }
                }
            }
        },
        "/satellites": {
            "get": {
                "description": "get all satellites",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/request.Satellite"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a satellite",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "satellite info",
                        "name": "satellite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully create Satellite"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            }
        },
        "/satellites/{name}": {
            "get": {
                "description": "get a satellite by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "update a satellite by name",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "description": "satellite info",
                        "name": "satellite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete satellite by name",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "description": "update a property satellite by name",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "satellite info",
                        "name": "satellite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            }
        },
        "/topsecret": {
            "post": {
                "description": "get secret message and coordinates",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "satellite info",
                        "name": "satellite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SatellitesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            }
        },
        "/topsecret_split": {
            "get": {
                "description": "get secret message and coordinates",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            }
        },
        "/topsecret_split/{name}": {
            "post": {
                "description": "put message and distance on satellite",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "satellite info",
                        "name": "satellite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/request.Satellite"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.Health": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "request.Satellite": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "message": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            }
        },
        "request.SatelliteRequest": {
            "type": "object",
            "required": [
                "distance",
                "message",
                "name"
            ],
            "properties": {
                "distance": {
                    "type": "number"
                },
                "message": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "request.SatellitesRequest": {
            "type": "object",
            "required": [
                "satellites"
            ],
            "properties": {
                "satellites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/request.SatelliteRequest"
                    }
                }
            }
        },
        "responses.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "object"
                }
            }
        },
        "responses.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/responses.Position"
                }
            }
        },
        "responses.Position": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "API - Operation Quasar Fire",
	Description: "Operation Quasar Fire",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
